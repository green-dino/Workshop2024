{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Index","text":""},{"location":"#course-overview","title":"Course Overview","text":"<ul> <li>Introduction</li> <li>Getting Started</li> </ul>"},{"location":"#labs-and-projects","title":"Labs and Projects","text":"<p>Meets Weekly on Wednesdays 3-4 pm</p>"},{"location":"#network-programming","title":"Network Programming","text":"<ul> <li>Client/Server Socket Programming</li> <li>Web Server</li> <li>UDP Pinger Lab</li> <li>SMTP Lab</li> </ul>"},{"location":"#web-and-proxy-servers","title":"Web and Proxy Servers","text":"<ul> <li>HTTP Web Proxy Server</li> </ul>"},{"location":"#network-tools","title":"Network Tools","text":"<ul> <li>ICMP Pinger Lab</li> <li>Traceroute Lab</li> </ul>"},{"location":"#multimedia-and-streaming","title":"Multimedia and Streaming","text":"<ul> <li>Video Streaming with RTSP and RTP</li> </ul>"},{"location":"#protocols-and-algorithms","title":"Protocols and Algorithms","text":"<ul> <li>Reliable Data Transfer Protocol (RDT) Lab</li> <li>Distance Vector Algorithm</li> </ul>"},{"location":"#additional-resources","title":"Additional Resources","text":"<ul> <li>Frequently Asked Questions</li> <li>Glossary</li> <li>Further Reading</li> </ul>"},{"location":"#getting-help","title":"Getting Help","text":"<ul> <li>Community Support</li> <li>Contact Us</li> </ul>"},{"location":"course-overview/introduction/","title":"Introduction","text":"<p>This workshop is focused on the fundamentals of network design and offers applied application of learning through functional design considerations exploring protocols. </p>"},{"location":"labs/network-programming/client-server-socket/","title":"Client server socket","text":"<pre><code>stateDiagram\n    [*] --&gt; ServerIdle\n    [*] --&gt; ClientIdle\n\n    ServerIdle --&gt; AcceptingConnections: Start Server\n    AcceptingConnections --&gt; WaitingForClient: Accept Client Connection\n    WaitingForClient --&gt; ProcessingRequest: Receive Client Message\n    ProcessingRequest --&gt; SendingResponse: Process and Display Message\n    SendingResponse --&gt; ServerIdle: Send Response to Client\n\n    ClientIdle --&gt; SendingRequest: Start Client\n    SendingRequest --&gt; WaitingForResponse: Send Message to Server\n    WaitingForResponse --&gt; ProcessingResponse: Receive Server Response\n    ProcessingResponse --&gt; ClientIdle: Display Server Response\n\n    ProcessingRequest --&gt; ServerIdle: Invalid Integer Received\n    ProcessingResponse --&gt; ClientIdle: Invalid Integer Sent</code></pre>"},{"location":"labs/network-programming/smtp-lab/","title":"lab","text":"<pre><code>stateDiagram\n    [*] --&gt; Start\n    Start --&gt; CreateSocket: Create Socket and Connect to Mail Server\n    CreateSocket --&gt; SendHELO: Send HELO Command\n    SendHELO --&gt; ReceiveHELOResponse: Receive HELO Response\n    ReceiveHELOResponse --&gt; CheckHELOResponse: Check HELO Response\n    CheckHELOResponse --&gt; SendMAILFROM: Send MAIL FROM Command\n    SendMAILFROM --&gt; ReceiveMAILFROMResponse: Receive MAIL FROM Response\n    ReceiveMAILFROMResponse --&gt; CheckMAILFROMResponse: Check MAIL FROM Response\n    CheckMAILFROMResponse --&gt; SendRCPTTO: Send RCPT TO Command\n    SendRCPTTO --&gt; ReceiveRCPTTOResponse: Receive RCPT TO Response\n    ReceiveRCPTTOResponse --&gt; CheckRCPTTOResponse: Check RCPT TO Response\n    CheckRCPTTOResponse --&gt; SendDATA: Send DATA Command\n    SendDATA --&gt; ReceiveDATAResponse: Receive DATA Response\n    ReceiveDATAResponse --&gt; CheckDATAResponse: Check DATA Response\n    CheckDATAResponse --&gt; SendMessage: Send Message Data\n    SendMessage --&gt; EndMessage: End Message with Single Period\n    EndMessage --&gt; SendQUIT: Send QUIT Command\n    SendQUIT --&gt; ReceiveQUITResponse: Receive QUIT Response\n    ReceiveQUITResponse --&gt; CloseConnection: Close Connection\n    CloseConnection --&gt; [*]\n\n    CheckHELOResponse --&gt; [*]: 220 Reply Not Received\n    CheckMAILFROMResponse --&gt; [*]: 250 Reply Not Received\n    CheckRCPTTOResponse --&gt; [*]: 250 Reply Not Received\n    CheckDATAResponse --&gt; [*]: 354 Reply Not Received</code></pre>"},{"location":"labs/network-programming/udp-pinger/","title":"UDP Ping lab","text":"<pre><code>stateDiagram\n    [*] --&gt; Start\n    Start --&gt; CreateSocket: Create UDP Socket\n    CreateSocket --&gt; BindSocket: Bind Socket to IP and Port\n    BindSocket --&gt; Listening: Start Listening for Incoming Packets\n\n    Listening --&gt; ReceivePacket: Receive Packet from Client\n    ReceivePacket --&gt; GenerateRandom: Generate Random Number (0-10)\n    GenerateRandom --&gt; CheckRandom: Check if Random Number &lt; 4\n\n    CheckRandom --&gt; PacketLost: Packet Considered Lost\n    PacketLost --&gt; Listening: Continue Listening\n\n    CheckRandom --&gt; ProcessPacket: Random Number &gt;= 4\n    ProcessPacket --&gt; CapitalizeMessage: Capitalize Client Message\n    CapitalizeMessage --&gt; SendResponse: Send Response to Client\n    SendResponse --&gt; Listening: Continue Listening</code></pre>"},{"location":"labs/network-programming/udp-pinger/#client-code","title":"Client Code","text":"<p><pre><code>stateDiagram\n    [*] --&gt; Start\n    Start --&gt; CreateSocket: Create UDP Socket\n    CreateSocket --&gt; SetTimeout: Set Socket Timeout to 1 Second\n    SetTimeout --&gt; SendPing: Send Ping Message to Server\n    SendPing --&gt; WaitForResponse: Wait for Server Response\n\n    WaitForResponse --&gt; ReceiveResponse: Response Received\n    ReceiveResponse --&gt; CalculateRTT: Calculate Round Trip Time (RTT)\n    CalculateRTT --&gt; PrintResponse: Print Response Message and RTT\n    PrintResponse --&gt; CheckPingCount: Check if 10 Pings Sent\n\n    WaitForResponse --&gt; Timeout: No Response within 1 Second\n    Timeout --&gt; PrintTimeout: Print \"Request Timed Out\"\n    PrintTimeout --&gt; CheckPingCount: Check if 10 Pings Sent\n\n    CheckPingCount --&gt; SendPing: Less than 10 Pings Sent\n    CheckPingCount --&gt; CloseSocket: 10 Pings Sent\n    CloseSocket --&gt; [*]</code></pre> Requirements</p> <pre><code>classDiagram\n    class PingMessage {\n        +int sequence_number\n        +Date time\n        +String formatMessage()\n    }\n\n    class Client {\n        +int currentSequence\n        +Date sendTime\n        +PingMessage createPingMessage()\n        +void sendPing()\n    }\n\n    class Server {\n        +void receivePing(PingMessage message)\n        +void processPing(PingMessage message)\n        +void sendResponse(PingMessage message)\n    }\n\n    PingMessage \"1\" --&gt; \"1\" Client : created by\n    Client \"1\" --&gt; \"1\" Server : sends ping to\n    Server \"1\" --&gt; \"1\" PingMessage : processes</code></pre>"}]}