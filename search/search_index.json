{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Index","text":""},{"location":"#course-overview","title":"Course Overview","text":"<ul> <li>Introduction</li> <li>Getting Started</li> </ul>"},{"location":"#labs-and-projects","title":"Labs and Projects","text":"<p>Meets Weekly on Wednesdays 3-4 pm</p>"},{"location":"#network-programming","title":"Network Programming","text":"<ul> <li>Client/Server Socket Programming</li> <li>Web Server</li> <li>UDP Pinger Lab</li> <li>SMTP Lab</li> </ul>"},{"location":"#web-and-proxy-servers","title":"Web and Proxy Servers","text":"<ul> <li>HTTP Web Proxy Server</li> </ul>"},{"location":"#network-tools","title":"Network Tools","text":"<ul> <li>ICMP Pinger Lab</li> <li>Traceroute Lab</li> </ul>"},{"location":"#multimedia-and-streaming","title":"Multimedia and Streaming","text":"<ul> <li>Video Streaming with RTSP and RTP</li> </ul>"},{"location":"#protocols-and-algorithms","title":"Protocols and Algorithms","text":"<ul> <li>Reliable Data Transfer Protocol (RDT) Lab</li> <li>Distance Vector Algorithm</li> </ul>"},{"location":"#additional-resources","title":"Additional Resources","text":"<ul> <li>Frequently Asked Questions</li> <li>Glossary</li> <li>Further Reading</li> </ul>"},{"location":"#getting-help","title":"Getting Help","text":"<ul> <li>Community Support</li> <li>Contact Us</li> </ul>"},{"location":"course-overview/getting-started/","title":"Getting Started Guide","text":"<p>Welcome to the Getting Started Guide! This guide will help you set up your environment and run your first program. Follow the steps below to get started.</p>"},{"location":"course-overview/getting-started/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, ensure you have the following installed on your machine:</p> <ul> <li>Python (version 3.6 or later)  </li> <li>A code editor (e.g., Visual Studio Code)  </li> <li>Basic knowledge of Python programming  </li> </ul>"},{"location":"course-overview/getting-started/#step-1-set-up-your-environment","title":"Step 1: Set Up Your Environment","text":"<ol> <li>Install Python </li> <li>Download and install Python from the official website.  </li> <li> <p>During installation, ensure you check the option to add Python to your system PATH.  </p> </li> <li> <p>Install a Code Editor </p> </li> <li>Download and install Visual Studio Code.  </li> </ol>"},{"location":"course-overview/getting-started/#step-2-create-a-project-directory","title":"Step 2: Create a Project Directory","text":"<ol> <li>Open your terminal:  </li> <li>Windows: Use Command Prompt.  </li> <li> <p>macOS/Linux: Use Terminal.  </p> </li> <li> <p>Create a new directory for your project: <pre><code>mkdir my_project\ncd my_project\n</code></pre></p> </li> </ol>"},{"location":"course-overview/introduction/","title":"Introduction","text":"<p>This workshop is focused on the fundamentals of network design and offers applied application of learning through functional design considerations exploring protocols. </p>"},{"location":"course-overview/introduction/#introduction-to-material-and-design-considerations","title":"Introduction to Material and Design Considerations","text":"<p>In software engineering, various design methodologies are employed to create robust, maintainable, and reusable code. Here, we discuss three key design paradigms\u2014Structured Programming, Stratified Design, and Object-Oriented Design\u2014along with the elements you should aim to reuse in your code.</p>"},{"location":"course-overview/introduction/#structured-programming","title":"Structured Programming","text":"<p>Structured Programming encourages the creation of modules that meet specific specifications and can be reused within the bounds of those specifications. - Key principles:   - Emphasizes clear, linear flow of control.   - Utilizes subroutines, loops, and conditionals to create well-defined program structures. - Goal: Simplify the development process and enhance code readability.</p> <pre><code>erDiagram\n    STRUCTURED_PROGRAMMING {\n        string id PK\n        string name\n    }\n\n    KEY_PRINCIPLES {\n        string id PK\n        string principle\n    }\n\n    GOAL {\n        string id PK\n        string description\n    }\n\n    STRUCTURED_PROGRAMMING ||--o{ KEY_PRINCIPLES : follows\n    STRUCTURED_PROGRAMMING ||--o{ GOAL : aims_to</code></pre> <p>Note: Use this approach for simpler systems with a focus on clear program logic.</p>"},{"location":"course-overview/introduction/#stratified-design","title":"Stratified Design","text":"<p>Stratified Design builds on the principles of Structured Programming by encouraging the development of modules with commonly needed functionality. - Key principles:   - Promotes modularity and separation of concerns.   - Encourages modules that are adaptable to specification changes or reusable in different programs. - Benefits:   - Easier to adapt and extend software.   - Reduces duplication of effort.</p> <p>Annotation: Stratified Design is ideal for systems requiring flexibility and frequent updates.</p>"},{"location":"course-overview/introduction/#object-oriented-design","title":"Object-Oriented Design","text":"<p>Object-Oriented Design (OOD) is a form of stratified design that focuses on classes of objects and information hiding. - Key principles:   - Encapsulation of data and behavior within objects.   - Reusability through inheritance and polymorphism. - Benefits:   - Enhances maintainability and modularity.   - Simplifies the creation and management of complex systems.  </p> <p>Example: Use OOD to design applications with interconnected components, such as a customer management system.</p>"},{"location":"course-overview/introduction/#reusability-considerations","title":"Reusability Considerations","text":"<p>To maximize reusability in your code, aim to reuse the following elements:</p>"},{"location":"course-overview/introduction/#1-data-types","title":"1. Data Types","text":"<ul> <li>Define and reuse custom data types to ensure consistency and reduce redundancy.</li> </ul> <pre><code>classDiagram\n    class DataType {\n        +name: String\n        +type: String\n        +defaultValue: Any\n    }\n\n    class CustomDataType {\n        +customField1: String\n        +customField2: Integer\n    }\n\n    DataType &lt;|-- CustomDataType</code></pre>"},{"location":"course-overview/introduction/#2-functions","title":"2. Functions","text":"<ul> <li>Create reusable functions that perform specific tasks and can be called from different parts of the program.</li> </ul> <pre><code>flowchart TD\n    A[Start] --&gt; B[Define Function]\n    B --&gt; C[Call Function]\n    C --&gt; D[Perform Task]\n    D --&gt; E[End]</code></pre>"},{"location":"course-overview/introduction/#3-classes","title":"3. Classes","text":"<ul> <li>Design classes that encapsulate data and behavior, promoting reuse and modularity.</li> </ul> <pre><code>classDiagram\n    class Class {\n        +attribute1: Type\n        +attribute2: Type\n        +method1(): void\n        +method2(): void\n    }</code></pre>"},{"location":"course-overview/introduction/#4-methods","title":"4. Methods","text":"<ul> <li>Implement methods within classes that can be reused across different instances and contexts.</li> </ul> <pre><code>sequenceDiagram\n    participant Client\n    participant Class\n    Client-&gt;&gt;Class: call method1()\n    Class--&gt;&gt;Client: return result</code></pre>"},{"location":"course-overview/introduction/#5-control-abstractions","title":"5. Control Abstractions","text":"<ul> <li>Use control structures like loops and conditionals to create reusable patterns of execution.</li> </ul> <pre><code>flowchart TD\n    A[Start] --&gt; B{Condition?}\n    B --&gt;|True| C[Execute Loop]\n    B --&gt;|False| D[End]\n    C --&gt; B</code></pre>"},{"location":"course-overview/introduction/#6-interface-abstractions","title":"6. Interface Abstractions","text":"<ul> <li>Define clear interfaces for modules and classes to promote interoperability and reuse.</li> </ul> <pre><code>classDiagram\n    class Interface {\n        +method1(): void\n        +method2(): void\n    }\n\n    class Implementation {\n        +method1(): void\n        +method2(): void\n    }\n\n    Interface &lt;|-- Implementation</code></pre>"},{"location":"course-overview/introduction/#7-syntactic-abstractions","title":"7. Syntactic Abstractions","text":"<ul> <li>Utilize macros and other syntactic constructs to create reusable code snippets.</li> </ul> <pre><code>flowchart TD\n    A[Start] --&gt; B[Define Macro]\n    B --&gt; C[Use Macro]\n    C --&gt; D[Expand Macro]\n    D --&gt; E[End]</code></pre>"},{"location":"course-overview/introduction/#8-packages-and-modules","title":"8. Packages and Modules","text":"<ul> <li>Organize related functionality into packages and modules to promote reuse and maintainability.</li> </ul>"},{"location":"course-overview/introduction/#9-whole-languages","title":"9. Whole Languages","text":"<ul> <li>In some cases, entire domain-specific languages can be created to facilitate reuse across different projects.</li> </ul> <p>Tip: Consistently applying these principles ensures long-term scalability and efficiency in software development.</p>"},{"location":"labs/network-programming/client-server-socket/","title":"Client server socket","text":"<pre><code>stateDiagram\n    [*] --&gt; ServerIdle\n    [*] --&gt; ClientIdle\n\n    ServerIdle --&gt; AcceptingConnections: Start Server\n    AcceptingConnections --&gt; WaitingForClient: Accept Client Connection\n    WaitingForClient --&gt; ProcessingRequest: Receive Client Message\n    ProcessingRequest --&gt; SendingResponse: Process and Display Message\n    SendingResponse --&gt; ServerIdle: Send Response to Client\n\n    ClientIdle --&gt; SendingRequest: Start Client\n    SendingRequest --&gt; WaitingForResponse: Send Message to Server\n    WaitingForResponse --&gt; ProcessingResponse: Receive Server Response\n    ProcessingResponse --&gt; ClientIdle: Display Server Response\n\n    ProcessingRequest --&gt; ServerIdle: Invalid Integer Received\n    ProcessingResponse --&gt; ClientIdle: Invalid Integer Sent</code></pre>"},{"location":"labs/network-programming/smtp-lab/","title":"lab","text":"<pre><code>stateDiagram\n    [*] --&gt; Start\n    Start --&gt; CreateSocket: Create Socket and Connect to Mail Server\n    CreateSocket --&gt; SendHELO: Send HELO Command\n    SendHELO --&gt; ReceiveHELOResponse: Receive HELO Response\n    ReceiveHELOResponse --&gt; CheckHELOResponse: Check HELO Response\n    CheckHELOResponse --&gt; SendMAILFROM: Send MAIL FROM Command\n    SendMAILFROM --&gt; ReceiveMAILFROMResponse: Receive MAIL FROM Response\n    ReceiveMAILFROMResponse --&gt; CheckMAILFROMResponse: Check MAIL FROM Response\n    CheckMAILFROMResponse --&gt; SendRCPTTO: Send RCPT TO Command\n    SendRCPTTO --&gt; ReceiveRCPTTOResponse: Receive RCPT TO Response\n    ReceiveRCPTTOResponse --&gt; CheckRCPTTOResponse: Check RCPT TO Response\n    CheckRCPTTOResponse --&gt; SendDATA: Send DATA Command\n    SendDATA --&gt; ReceiveDATAResponse: Receive DATA Response\n    ReceiveDATAResponse --&gt; CheckDATAResponse: Check DATA Response\n    CheckDATAResponse --&gt; SendMessage: Send Message Data\n    SendMessage --&gt; EndMessage: End Message with Single Period\n    EndMessage --&gt; SendQUIT: Send QUIT Command\n    SendQUIT --&gt; ReceiveQUITResponse: Receive QUIT Response\n    ReceiveQUITResponse --&gt; CloseConnection: Close Connection\n    CloseConnection --&gt; [*]\n\n    CheckHELOResponse --&gt; [*]: 220 Reply Not Received\n    CheckMAILFROMResponse --&gt; [*]: 250 Reply Not Received\n    CheckRCPTTOResponse --&gt; [*]: 250 Reply Not Received\n    CheckDATAResponse --&gt; [*]: 354 Reply Not Received</code></pre>"},{"location":"labs/network-programming/udp-pinger/","title":"UDP Ping lab","text":"<pre><code>stateDiagram\n    [*] --&gt; Start\n    Start --&gt; CreateSocket: Create UDP Socket\n    CreateSocket --&gt; BindSocket: Bind Socket to IP and Port\n    BindSocket --&gt; Listening: Start Listening for Incoming Packets\n\n    Listening --&gt; ReceivePacket: Receive Packet from Client\n    ReceivePacket --&gt; GenerateRandom: Generate Random Number (0-10)\n    GenerateRandom --&gt; CheckRandom: Check if Random Number &lt; 4\n\n    CheckRandom --&gt; PacketLost: Packet Considered Lost\n    PacketLost --&gt; Listening: Continue Listening\n\n    CheckRandom --&gt; ProcessPacket: Random Number &gt;= 4\n    ProcessPacket --&gt; CapitalizeMessage: Capitalize Client Message\n    CapitalizeMessage --&gt; SendResponse: Send Response to Client\n    SendResponse --&gt; Listening: Continue Listening</code></pre>"},{"location":"labs/network-programming/udp-pinger/#client-code","title":"Client Code","text":"<p><pre><code>stateDiagram\n    [*] --&gt; Start\n    Start --&gt; CreateSocket: Create UDP Socket\n    CreateSocket --&gt; SetTimeout: Set Socket Timeout to 1 Second\n    SetTimeout --&gt; SendPing: Send Ping Message to Server\n    SendPing --&gt; WaitForResponse: Wait for Server Response\n\n    WaitForResponse --&gt; ReceiveResponse: Response Received\n    ReceiveResponse --&gt; CalculateRTT: Calculate Round Trip Time (RTT)\n    CalculateRTT --&gt; PrintResponse: Print Response Message and RTT\n    PrintResponse --&gt; CheckPingCount: Check if 10 Pings Sent\n\n    WaitForResponse --&gt; Timeout: No Response within 1 Second\n    Timeout --&gt; PrintTimeout: Print \"Request Timed Out\"\n    PrintTimeout --&gt; CheckPingCount: Check if 10 Pings Sent\n\n    CheckPingCount --&gt; SendPing: Less than 10 Pings Sent\n    CheckPingCount --&gt; CloseSocket: 10 Pings Sent\n    CloseSocket --&gt; [*]</code></pre> Requirements</p> <pre><code>classDiagram\n    class PingMessage {\n        +int sequence_number\n        +Date time\n        +String formatMessage()\n    }\n\n    class Client {\n        +int currentSequence\n        +Date sendTime\n        +PingMessage createPingMessage()\n        +void sendPing()\n    }\n\n    class Server {\n        +void receivePing(PingMessage message)\n        +void processPing(PingMessage message)\n        +void sendResponse(PingMessage message)\n    }\n\n    PingMessage \"1\" --&gt; \"1\" Client : created by\n    Client \"1\" --&gt; \"1\" Server : sends ping to\n    Server \"1\" --&gt; \"1\" PingMessage : processes</code></pre>"},{"location":"labs/network-programming/web-server/","title":"Web Server","text":"<pre><code>stateDiagram\n    [*] --&gt; Start\n    Start --&gt; PrepareSocket: Prepare Server Socket\n    PrepareSocket --&gt; BindSocket: Bind Socket to IP and Port\n    BindSocket --&gt; Listen: Start Listening for Connections\n\n    Listen --&gt; ReadyToServe: Ready to Serve\n    ReadyToServe --&gt; AcceptConnection: Accept Client Connection\n    AcceptConnection --&gt; ReceiveRequest: Receive HTTP Request\n\n    ReceiveRequest --&gt; ParseRequest: Parse HTTP Request\n    ParseRequest --&gt; CheckFileExists: Check if Requested File Exists\n\n    CheckFileExists --&gt; FileExists: File Exists\n    FileExists --&gt; OpenFile: Open Requested File\n    OpenFile --&gt; ReadFile: Read File Contents\n    ReadFile --&gt; SendHeader: Send HTTP Header\n    SendHeader --&gt; SendFile: Send File Contents to Client\n    SendFile --&gt; CloseConnection: Close Client Connection\n    CloseConnection --&gt; ReadyToServe: Ready to Serve\n\n    CheckFileExists --&gt; FileNotFound: File Not Found\n    FileNotFound --&gt; Send404: Send 404 Not Found Response\n    Send404 --&gt; CloseConnection: Close Client Connection\n    CloseConnection --&gt; ReadyToServe: Ready to Serve\n\n    ReadyToServe --&gt; [*]: Server Shutdown</code></pre>"},{"location":"support/community-support/","title":"Community Support","text":""},{"location":"support/community-support/#posting-questions","title":"Posting Questions:","text":"<p>Clearly state your question or issue. Provide relevant details and context. Be respectful and follow community guidelines.</p>"},{"location":"support/community-support/#responding-to-others","title":"Responding to Others:","text":"<p>Offer help if you have relevant knowledge. Be polite and constructive in your responses.</p>"},{"location":"support/community-support/#participating-in-discussions","title":"Participating in Discussions:","text":"<p>Join ongoing discussions on topics of interest. Share your experiences and insights.</p>"},{"location":"support/contact/","title":"Contact","text":"<p>Contact Support</p>"}]}