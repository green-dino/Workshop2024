{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Index","text":""},{"location":"#course-overview","title":"Course Overview","text":"<ul> <li>Introduction</li> <li>Getting Started</li> </ul>"},{"location":"#labs-and-projects","title":"Labs and Projects","text":"<p>Meets Weekly on Wednesdays 3-4 pm</p>"},{"location":"#network-programming","title":"Network Programming","text":"<ul> <li>Client/Server Socket Programming</li> <li>Web Server</li> <li>UDP Pinger Lab</li> <li>SMTP Lab</li> </ul>"},{"location":"#web-and-proxy-servers","title":"Web and Proxy Servers","text":"<ul> <li>HTTP Web Proxy Server</li> </ul>"},{"location":"#network-tools","title":"Network Tools","text":"<ul> <li>ICMP Pinger Lab</li> <li>Traceroute Lab</li> </ul>"},{"location":"#multimedia-and-streaming","title":"Multimedia and Streaming","text":"<ul> <li>Video Streaming with RTSP and RTP</li> </ul>"},{"location":"#protocols-and-algorithms","title":"Protocols and Algorithms","text":"<ul> <li>Reliable Data Transfer Protocol (RDT) Lab</li> <li>Distance Vector Algorithm</li> </ul>"},{"location":"#additional-resources","title":"Additional Resources","text":"<ul> <li>Frequently Asked Questions</li> <li>Glossary</li> <li>Further Reading</li> </ul>"},{"location":"#getting-help","title":"Getting Help","text":"<ul> <li>Community Support</li> <li>Contact Us</li> </ul>"},{"location":"course-overview/getting-started/","title":"Getting Started Guide","text":"<p>Welcome to the Getting Started Guide! This guide will help you set up your environment and run your first program. Follow the steps below to get started.</p>"},{"location":"course-overview/getting-started/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, ensure you have the following installed on your machine:</p> <ul> <li>Python (version 3.6 or later)  </li> <li>A code editor (e.g., Visual Studio Code)  </li> <li>Basic knowledge of Python programming  </li> </ul>"},{"location":"course-overview/getting-started/#step-1-set-up-your-environment","title":"Step 1: Set Up Your Environment","text":"<ol> <li>Install Python </li> <li>Download and install Python from the official website.  </li> <li> <p>During installation, ensure you check the option to add Python to your system PATH.  </p> </li> <li> <p>Install a Code Editor </p> </li> <li>Download and install Visual Studio Code.  </li> </ol>"},{"location":"course-overview/getting-started/#step-2-create-a-project-directory","title":"Step 2: Create a Project Directory","text":"<ol> <li>Open your terminal:  </li> <li>Windows: Use Command Prompt.  </li> <li> <p>macOS/Linux: Use Terminal.  </p> </li> <li> <p>Create a new directory for your project: <pre><code>mkdir my_project\ncd my_project\n</code></pre></p> </li> </ol>"},{"location":"course-overview/introduction/","title":"Introduction","text":"<p>This workshop is focused on the fundamentals of network design and offers applied application of learning through functional design considerations exploring protocols. </p>"},{"location":"course-overview/introduction/#introduction-to-material-and-design-considerations","title":"Introduction to Material and Design Considerations","text":"<p>In software engineering, various design methodologies are employed to create robust, maintainable, and reusable code. Here, we discuss three key design paradigms\u2014Structured Programming, Stratified Design, and Object-Oriented Design\u2014along with the elements you should aim to reuse in your code.</p>"},{"location":"course-overview/introduction/#structured-programming","title":"Structured Programming","text":"<p>Structured Programming encourages the creation of modules that meet specific specifications and can be reused within the bounds of those specifications. - Key principles:   - Emphasizes clear, linear flow of control.   - Utilizes subroutines, loops, and conditionals to create well-defined program structures. - Goal: Simplify the development process and enhance code readability.</p> <pre><code>erDiagram\n    STRUCTURED_PROGRAMMING {\n        string id PK\n        string name\n    }\n\n    KEY_PRINCIPLES {\n        string id PK\n        string principle\n    }\n\n    GOAL {\n        string id PK\n        string description\n    }\n\n    STRUCTURED_PROGRAMMING ||--o{ KEY_PRINCIPLES : follows\n    STRUCTURED_PROGRAMMING ||--o{ GOAL : aims_to</code></pre> <p>Note: Use this approach for simpler systems with a focus on clear program logic.</p>"},{"location":"course-overview/introduction/#stratified-design","title":"Stratified Design","text":"<p>Stratified Design builds on the principles of Structured Programming by encouraging the development of modules with commonly needed functionality. - Key principles:   - Promotes modularity and separation of concerns.   - Encourages modules that are adaptable to specification changes or reusable in different programs. - Benefits:   - Easier to adapt and extend software.   - Reduces duplication of effort.</p> <p>Annotation: Stratified Design is ideal for systems requiring flexibility and frequent updates.</p>"},{"location":"course-overview/introduction/#object-oriented-design","title":"Object-Oriented Design","text":"<p>Object-Oriented Design (OOD) is a form of stratified design that focuses on classes of objects and information hiding. - Key principles:   - Encapsulation of data and behavior within objects.   - Reusability through inheritance and polymorphism. - Benefits:   - Enhances maintainability and modularity.   - Simplifies the creation and management of complex systems.  </p> <p>Example: Use OOD to design applications with interconnected components, such as a customer management system.</p>"},{"location":"course-overview/introduction/#reusability-considerations","title":"Reusability Considerations","text":"<p>To maximize reusability in your code, aim to reuse the following elements:</p>"},{"location":"course-overview/introduction/#1-data-types","title":"1. Data Types","text":"<ul> <li>Define and reuse custom data types to ensure consistency and reduce redundancy.</li> </ul> <pre><code>classDiagram\n    class DataType {\n        +name: String\n        +type: String\n        +defaultValue: Any\n    }\n\n    class CustomDataType {\n        +customField1: String\n        +customField2: Integer\n    }\n\n    DataType &lt;|-- CustomDataType</code></pre>"},{"location":"course-overview/introduction/#2-functions","title":"2. Functions","text":"<ul> <li>Create reusable functions that perform specific tasks and can be called from different parts of the program.</li> </ul> <pre><code>flowchart TD\n    A[Start] --&gt; B[Define Function]\n    B --&gt; C[Call Function]\n    C --&gt; D[Perform Task]\n    D --&gt; E[End]</code></pre>"},{"location":"course-overview/introduction/#3-classes","title":"3. Classes","text":"<ul> <li>Design classes that encapsulate data and behavior, promoting reuse and modularity.</li> </ul> <pre><code>classDiagram\n    class Class {\n        +attribute1: Type\n        +attribute2: Type\n        +method1(): void\n        +method2(): void\n    }</code></pre>"},{"location":"course-overview/introduction/#4-methods","title":"4. Methods","text":"<ul> <li>Implement methods within classes that can be reused across different instances and contexts.</li> </ul> <pre><code>sequenceDiagram\n    participant Client\n    participant Class\n    Client-&gt;&gt;Class: call method1()\n    Class--&gt;&gt;Client: return result</code></pre>"},{"location":"course-overview/introduction/#5-control-abstractions","title":"5. Control Abstractions","text":"<ul> <li>Use control structures like loops and conditionals to create reusable patterns of execution.</li> </ul> <pre><code>flowchart TD\n    A[Start] --&gt; B{Condition?}\n    B --&gt;|True| C[Execute Loop]\n    B --&gt;|False| D[End]\n    C --&gt; B</code></pre>"},{"location":"course-overview/introduction/#6-interface-abstractions","title":"6. Interface Abstractions","text":"<ul> <li>Define clear interfaces for modules and classes to promote interoperability and reuse.</li> </ul> <pre><code>classDiagram\n    class Interface {\n        +method1(): void\n        +method2(): void\n    }\n\n    class Implementation {\n        +method1(): void\n        +method2(): void\n    }\n\n    Interface &lt;|-- Implementation</code></pre>"},{"location":"course-overview/introduction/#7-syntactic-abstractions","title":"7. Syntactic Abstractions","text":"<ul> <li>Utilize macros and other syntactic constructs to create reusable code snippets.</li> </ul> <pre><code>flowchart TD\n    A[Start] --&gt; B[Define Macro]\n    B --&gt; C[Use Macro]\n    C --&gt; D[Expand Macro]\n    D --&gt; E[End]</code></pre>"},{"location":"course-overview/introduction/#8-packages-and-modules","title":"8. Packages and Modules","text":"<ul> <li>Organize related functionality into packages and modules to promote reuse and maintainability.</li> </ul>"},{"location":"course-overview/introduction/#9-whole-languages","title":"9. Whole Languages","text":"<ul> <li>In some cases, entire domain-specific languages can be created to facilitate reuse across different projects.</li> </ul> <p>Tip: Consistently applying these principles ensures long-term scalability and efficiency in software development.</p>"},{"location":"labs/network-programming/client-server-socket/","title":"Client server socket","text":"<pre><code>stateDiagram\n    [*] --&gt; ServerIdle\n    [*] --&gt; ClientIdle\n\n    ServerIdle --&gt; AcceptingConnections: Start Server\n    AcceptingConnections --&gt; WaitingForClient: Accept Client Connection\n    WaitingForClient --&gt; ProcessingRequest: Receive Client Message\n    ProcessingRequest --&gt; SendingResponse: Process and Display Message\n    SendingResponse --&gt; ServerIdle: Send Response to Client\n\n    ClientIdle --&gt; SendingRequest: Start Client\n    SendingRequest --&gt; WaitingForResponse: Send Message to Server\n    WaitingForResponse --&gt; ProcessingResponse: Receive Server Response\n    ProcessingResponse --&gt; ClientIdle: Display Server Response\n\n    ProcessingRequest --&gt; ServerIdle: Invalid Integer Received\n    ProcessingResponse --&gt; ClientIdle: Invalid Integer Sent</code></pre>"},{"location":"labs/network-programming/smtp-lab/","title":"SMTP-lab","text":"<pre><code>stateDiagram\n    [*] --&gt; Start\n    Start --&gt; CreateSocket: Create Socket and Connect to Mail Server\n    CreateSocket --&gt; SendHELO: Send HELO Command\n    SendHELO --&gt; ReceiveHELOResponse: Receive HELO Response\n    ReceiveHELOResponse --&gt; CheckHELOResponse: Check HELO Response\n    CheckHELOResponse --&gt; SendMAILFROM: Send MAIL FROM Command\n    SendMAILFROM --&gt; ReceiveMAILFROMResponse: Receive MAIL FROM Response\n    ReceiveMAILFROMResponse --&gt; CheckMAILFROMResponse: Check MAIL FROM Response\n    CheckMAILFROMResponse --&gt; SendRCPTTO: Send RCPT TO Command\n    SendRCPTTO --&gt; ReceiveRCPTTOResponse: Receive RCPT TO Response\n    ReceiveRCPTTOResponse --&gt; CheckRCPTTOResponse: Check RCPT TO Response\n    CheckRCPTTOResponse --&gt; SendDATA: Send DATA Command\n    SendDATA --&gt; ReceiveDATAResponse: Receive DATA Response\n    ReceiveDATAResponse --&gt; CheckDATAResponse: Check DATA Response\n    CheckDATAResponse --&gt; SendMessage: Send Message Data\n    SendMessage --&gt; EndMessage: End Message with Single Period\n    EndMessage --&gt; SendQUIT: Send QUIT Command\n    SendQUIT --&gt; ReceiveQUITResponse: Receive QUIT Response\n    ReceiveQUITResponse --&gt; CloseConnection: Close Connection\n    CloseConnection --&gt; [*]\n\n    CheckHELOResponse --&gt; [*]: 220 Reply Not Received\n    CheckMAILFROMResponse --&gt; [*]: 250 Reply Not Received\n    CheckRCPTTOResponse --&gt; [*]: 250 Reply Not Received\n    CheckDATAResponse --&gt; [*]: 354 Reply Not Received</code></pre>"},{"location":"labs/network-programming/udp-pinger/","title":"UDP Ping lab","text":"<pre><code>stateDiagram\n    [*] --&gt; Start\n    Start --&gt; CreateSocket: Create UDP Socket\n    CreateSocket --&gt; BindSocket: Bind Socket to IP and Port\n    BindSocket --&gt; Listening: Start Listening for Incoming Packets\n\n    Listening --&gt; ReceivePacket: Receive Packet from Client\n    ReceivePacket --&gt; GenerateRandom: Generate Random Number (0-10)\n    GenerateRandom --&gt; CheckRandom: Check if Random Number &lt; 4\n\n    CheckRandom --&gt; PacketLost: Packet Considered Lost\n    PacketLost --&gt; Listening: Continue Listening\n\n    CheckRandom --&gt; ProcessPacket: Random Number &gt;= 4\n    ProcessPacket --&gt; CapitalizeMessage: Capitalize Client Message\n    CapitalizeMessage --&gt; SendResponse: Send Response to Client\n    SendResponse --&gt; Listening: Continue Listening</code></pre>"},{"location":"labs/network-programming/udp-pinger/#client-code","title":"Client Code","text":"<p><pre><code>stateDiagram\n    [*] --&gt; Start\n    Start --&gt; CreateSocket: Create UDP Socket\n    CreateSocket --&gt; SetTimeout: Set Socket Timeout to 1 Second\n    SetTimeout --&gt; SendPing: Send Ping Message to Server\n    SendPing --&gt; WaitForResponse: Wait for Server Response\n\n    WaitForResponse --&gt; ReceiveResponse: Response Received\n    ReceiveResponse --&gt; CalculateRTT: Calculate Round Trip Time (RTT)\n    CalculateRTT --&gt; PrintResponse: Print Response Message and RTT\n    PrintResponse --&gt; CheckPingCount: Check if 10 Pings Sent\n\n    WaitForResponse --&gt; Timeout: No Response within 1 Second\n    Timeout --&gt; PrintTimeout: Print \"Request Timed Out\"\n    PrintTimeout --&gt; CheckPingCount: Check if 10 Pings Sent\n\n    CheckPingCount --&gt; SendPing: Less than 10 Pings Sent\n    CheckPingCount --&gt; CloseSocket: 10 Pings Sent\n    CloseSocket --&gt; [*]</code></pre> Requirements</p> <pre><code>classDiagram\n    class PingMessage {\n        +int sequence_number\n        +Date time\n        +String formatMessage()\n    }\n\n    class Client {\n        +int currentSequence\n        +Date sendTime\n        +PingMessage createPingMessage()\n        +void sendPing()\n    }\n\n    class Server {\n        +void receivePing(PingMessage message)\n        +void processPing(PingMessage message)\n        +void sendResponse(PingMessage message)\n    }\n\n    PingMessage \"1\" --&gt; \"1\" Client : created by\n    Client \"1\" --&gt; \"1\" Server : sends ping to\n    Server \"1\" --&gt; \"1\" PingMessage : processes</code></pre>"},{"location":"labs/network-programming/web-server/","title":"Web Server","text":"<pre><code>stateDiagram\n    [*] --&gt; Start\n    Start --&gt; PrepareSocket: Prepare Server Socket\n    PrepareSocket --&gt; BindSocket: Bind Socket to IP and Port\n    BindSocket --&gt; Listen: Start Listening for Connections\n\n    Listen --&gt; ReadyToServe: Ready to Serve\n    ReadyToServe --&gt; AcceptConnection: Accept Client Connection\n    AcceptConnection --&gt; ReceiveRequest: Receive HTTP Request\n\n    ReceiveRequest --&gt; ParseRequest: Parse HTTP Request\n    ParseRequest --&gt; CheckFileExists: Check if Requested File Exists\n\n    CheckFileExists --&gt; FileExists: File Exists\n    FileExists --&gt; OpenFile: Open Requested File\n    OpenFile --&gt; ReadFile: Read File Contents\n    ReadFile --&gt; SendHeader: Send HTTP Header\n    SendHeader --&gt; SendFile: Send File Contents to Client\n    SendFile --&gt; CloseConnection: Close Client Connection\n    CloseConnection --&gt; ReadyToServe: Ready to Serve\n\n    CheckFileExists --&gt; FileNotFound: File Not Found\n    FileNotFound --&gt; Send404: Send 404 Not Found Response\n    Send404 --&gt; CloseConnection: Close Client Connection\n    CloseConnection --&gt; ReadyToServe: Ready to Serve\n\n    ReadyToServe --&gt; [*]: Server Shutdown</code></pre>"},{"location":"resources/faq/","title":"FAQ: Fundamentals of Network Design Workshop","text":"<p>This FAQ addresses common questions about the workshop focused on network design fundamentals and applied functional design considerations exploring protocols.</p>"},{"location":"resources/faq/#what-is-the-main-focus-of-this-workshop","title":"What is the main focus of this workshop?","text":"<p>The workshop is centered on understanding the fundamentals of network design. It provides both theoretical and practical insights into design methodologies, including protocol exploration and functional design considerations.</p>"},{"location":"resources/faq/#who-is-this-workshop-intended-for","title":"Who is this workshop intended for?","text":"<p>This workshop is designed for:</p> <ul> <li>Beginners in network design seeking foundational knowledge.</li> <li>IT professionals looking to enhance their network architecture skills.</li> <li>Software engineers exploring networking as part of system design.</li> </ul>"},{"location":"resources/faq/#what-topics-are-covered-in-the-workshop","title":"What topics are covered in the workshop?","text":"<p>Key topics include:</p> <ol> <li>Introduction to Network Design Fundamentals</li> <li>Protocols and Their Applications</li> <li>Design Methodologies:</li> <li>Structured Programming</li> <li>Stratified Design</li> <li>Object-Oriented Design</li> <li>Reusability Considerations in Design</li> <li>Applied Functional Design in Network Scenarios</li> </ol>"},{"location":"resources/faq/#will-there-be-hands-on-sessions","title":"Will there be hands-on sessions?","text":"<p>Yes, participants will apply learning through practical exercises and explore functional design considerations with real-world protocol examples.</p>"},{"location":"resources/faq/#what-are-some-key-takeaways-from-the-workshop","title":"What are some key takeaways from the workshop?","text":"<p>By the end of the workshop, you will:</p> <ul> <li>Understand essential network design principles.</li> <li>Gain practical experience with protocol exploration.</li> <li>Learn how to apply structured and modular design techniques.</li> <li>Develop skills for creating reusable and maintainable network solutions.</li> </ul>"},{"location":"resources/faq/#are-there-prerequisites-for-attending-this-workshop","title":"Are there prerequisites for attending this workshop?","text":"<p>No specific prerequisites are required, but familiarity with:</p> <ul> <li>Basic networking concepts</li> <li>Programming fundamentals</li> <li>Problem-solving in technical contexts is helpful.</li> </ul>"},{"location":"resources/faq/#what-tools-or-software-are-needed","title":"What tools or software are needed?","text":"<p>Participants are encouraged to bring:</p> <ul> <li>A laptop with basic networking tools (e.g., Wireshark, Cisco Packet Tracer).</li> <li>Access to a code editor (e.g., VS Code, PyCharm) for programming exercises.</li> </ul>"},{"location":"resources/faq/#how-is-the-workshop-structured","title":"How is the workshop structured?","text":"<p>The workshop includes:</p> <ul> <li>Lectures: Conceptual overviews and theoretical frameworks.</li> <li>Exercises: Practical tasks involving protocols and design challenges.</li> <li>Q&amp;A sessions: Time to address specific participant questions.</li> </ul>"},{"location":"resources/faq/#can-i-get-a-certificate-of-completion","title":"Can I get a certificate of completion?","text":"<p>Yes, participants will receive a certificate of completion upon fulfilling the workshop requirements.</p>"},{"location":"resources/faq/#what-design-paradigms-will-i-learn","title":"What design paradigms will I learn?","text":"<p>The workshop emphasizes:</p> <ul> <li>Structured Programming: Linear flow, clear logic.</li> <li>Stratified Design: Modularity and adaptability.</li> <li>Object-Oriented Design (OOD): Encapsulation, inheritance, and polymorphism.</li> </ul>"},{"location":"resources/faq/#how-does-this-workshop-support-reusability-in-design","title":"How does this workshop support reusability in design?","text":"<p>The workshop explores reusability through:</p> <ol> <li>Data Types: Consistency across modules.</li> <li>Functions: Modular and reusable methods.</li> <li>Classes and Methods: Object-oriented encapsulation.</li> <li>Control Abstractions: Flexible execution patterns.</li> <li>Interfaces: Promoting interoperability.</li> <li>Packages and Modules: Organized, maintainable code.</li> </ol>"},{"location":"resources/faq/#what-are-protocols-and-why-are-they-important","title":"What are protocols, and why are they important?","text":"<p>Protocols are rules governing data communication in a network. They are essential for:</p> <ul> <li>Ensuring reliable data transmission.</li> <li>Standardizing communication across devices.</li> <li>Supporting functional design through layers and interfaces.</li> </ul>"},{"location":"resources/faq/#where-can-i-learn-more-or-get-updates-about-the-workshop","title":"Where can I learn more or get updates about the workshop?","text":"<p>Stay informed by visiting our official website or contacting us at email for updates and additional resources.</p> <p>Tip: Bring questions or real-world scenarios you\u2019re working on to get the most out of the workshop!</p>"},{"location":"resources/further-reading/","title":"Further Reading","text":"<p>Kurose, J., &amp; Ross, K. (2021). Computer Networking: A Top-Down Approach (8<sup>th</sup> ed.). Pearson. Available at: https://gaia.cs.umass.edu/</p>"},{"location":"resources/glossary/","title":"Glossary","text":"<p>This page has considerations about the structure of your program  and considerations about how to troubleshoot the engineering </p>"},{"location":"resources/glossary/#considerations-about-logging-modules","title":"Considerations about logging modules","text":"<pre><code>import datetime\nimport logging\nfrom dateutil import parser\nfrom typing import List, Optional, Dict\n\n# Configure logging\nlogger = logging.getLogger('EventAnalyzer')\nlogger.setLevel(logging.DEBUG)\nch = logging.StreamHandler()\nch.setLevel(logging.DEBUG)\nformatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\nch.setFormatter(formatter)\nlogger.addHandler(ch)\n\nDATE_FORMATS = [\n    \"%Y-%m-%d\",\n    \"%d/%m/%Y\",\n    \"%m/%d/%Y\",\n    \"%d.%m.%Y\",\n    \"%m.%d.%Y\",\n    \"%b %d, %Y\",\n    \"%B %d, %Y\",\n    \"%d %B %Y\",\n    \"%d %b %Y\",\n    \"%Y-%m-%dT%H:%M:%S\"\n]\n\nUNNAMED_EVENT = 'Unnamed Event'\n\ndef parse_date(\n    date_str: str, \n    allow_fallback: bool = True, \n    timezone_aware: bool = False\n) -&gt; Optional[datetime.datetime]:\n    \"\"\"\n    Attempt to parse a date string with multiple formats.\n\n    Args:\n        date_str (str): The date string to parse.\n        allow_fallback (bool): Whether to allow fuzzy parsing as a fallback. Defaults to True.\n        timezone_aware (bool): Whether to return a timezone-aware datetime object. Defaults to False.\n\n    Returns:\n        Optional[datetime.datetime]: The parsed date or None if parsing fails.\n    \"\"\"\n    for fmt in DATE_FORMATS:\n        try:\n            parsed_date = datetime.datetime.strptime(date_str, fmt)\n            if timezone_aware:\n                parsed_date = parsed_date.replace(tzinfo=datetime.timezone.utc)\n            logger.info(f\"Parsed '{date_str}' successfully with format '{fmt}'.\")\n            return parsed_date\n        except ValueError:\n            logger.debug(f\"Failed to parse '{date_str}' with format '{fmt}'.\")\n\n    if allow_fallback:\n        try:\n            parsed_date = parser.parse(date_str, fuzzy=True, dayfirst=True, yearfirst=True)\n            if timezone_aware:\n                parsed_date = parsed_date.replace(tzinfo=datetime.timezone.utc)\n            logger.info(f\"Parsed '{date_str}' with fuzzy matching.\")\n            return parsed_date\n        except ValueError:\n            logger.error(f\"ValueError: Unable to parse date '{date_str}' with fuzzy matching.\")\n        except OverflowError:\n            logger.error(f\"OverflowError: Date '{date_str}' is out of range.\")\n\n    logger.warning(f\"Returning None for unrecognized date: '{date_str}'\")\n    return None\n\ndef analyze_events(events: List[Dict[str, str]]) -&gt; None:\n    \"\"\"\n    Analyze and print events with parsed dates.\n\n    Args:\n        events (List[Dict[str, str]]): List of event dictionaries containing 'date' and 'event' keys.\n    \"\"\"\n    if not events:\n        logger.info(\"No events to analyze.\")\n        return\n\n    invalid_events = []\n\n    for event in events:\n        date_str = event.get(\"date\", \"\")\n        event_date = parse_date(date_str)\n        if event_date:\n            event_name = event.get('event', UNNAMED_EVENT)\n            formatted_date = event_date.strftime('%A, %B %d, %Y')\n            print(f\"Event: {event_name} on {formatted_date}\")\n        else:\n            logger.warning(f\"Skipping event due to invalid date: {event}\")\n            invalid_events.append({\"event\": event, \"reason\": f\"Invalid date format: '{date_str}'\"})\n\n    if invalid_events:\n        logger.info(f\"Invalid events: {invalid_events}\")\n\nif __name__ == \"__main__\":\n    events_input = [\n        {\"date\": \"2023-01-01\", \"event\": \"New Year's Day\"},\n        {\"date\": \"2023-02-14\", \"event\": \"Valentine's Day\"},\n        {\"date\": \"2023-07-04\", \"event\": \"Independence Day\"},\n        {\"date\": \"2023-12-25\", \"event\": \"Christmas Day\"},\n        {\"date\": \"Jul 4, 2023\", \"event\": \"Independence Day\"},\n        {\"date\": \"2023-07-04 00:00:00\", \"event\": \"Midnight Independence Day Celebration\"},\n        {\"date\": \"4 July 2023\", \"event\": \"Independence Day\"},\n        {\"date\": \"July 4th, 2023\", \"event\": \"Independence Day\"},\n        {\"date\": \"2023-07-04T00:00:00\", \"event\": \"Independence Day\"},\n        {\"date\": \"4/7/23\", \"event\": \"Independence Day\"},\n        {\"date\": \"4.7.23\", \"event\": \"Independence Day\"},\n        {\"date\": \"2023-07-04\", \"event\": \"Independence Day\"}  # Invalid date format\n    ]\n\n    analyze_events(events_input)\n</code></pre>"},{"location":"resources/glossary/#considerations-about-events","title":"Considerations about events","text":"<pre><code>events = [\n    {\"event\": \"Conference\", \"date\": \"2024-10-18\"},\n    {\"event\": \"Meetup\", \"date\": \"18/10/2024\"},\n    {\"event\": \"Hackathon\", \"date\": \"InvalidDate\"}\n]\n\nanalyze_events(events)\n</code></pre>"},{"location":"resources/glossary/#logging-handlers","title":"Logging handlers","text":"<pre><code>from logging.handlers import RotatingFileHandler\n\n\nclass CustomLoggingHandler:\n    def __init__(\n        self,\n        log_name: str = \"EventAnalyzer\",\n        log_file: Optional[str] = None,\n        log_level: int = logging.DEBUG,\n        max_bytes: int = 10 * 1024 * 1024,  # 10 MB\n        backup_count: int = 5,\n        formatter: Optional[logging.Formatter] = None,\n        handlers: Optional[list] = None\n    ):\n        self.logger = logging.getLogger(log_name)\n        self.logger.setLevel(log_level)\n\n        # Use provided formatter or create a default one\n        self.formatter = formatter or self.create_formatter()\n\n        # Create and add handlers\n        if handlers:\n            for handler in handlers:\n                handler.setFormatter(self.formatter)\n                self.logger.addHandler(handler)\n        else:\n            self.add_default_handlers(log_file, log_level, max_bytes, backup_count)\n\n    def create_formatter(self) -&gt; logging.Formatter:\n        \"\"\"Creates a default logging formatter.\"\"\"\n        return logging.Formatter(\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\")\n\n    def create_file_handler(\n        self, log_file: str, log_level: int, max_bytes: int, backup_count: int\n    ) -&gt; Optional[logging.Handler]:\n        \"\"\"Creates a RotatingFileHandler.\"\"\"\n        try:\n            file_handler = RotatingFileHandler(\n                log_file, maxBytes=max_bytes, backupCount=backup_count\n            )\n            file_handler.setLevel(log_level)\n            file_handler.setFormatter(self.formatter)\n            return file_handler\n        except (IOError, PermissionError) as e:\n            self.logger.error(f\"Failed to set up file handler: {e}\")\n            return None\n\n    def add_default_handlers(\n        self, log_file: Optional[str], log_level: int, max_bytes: int, backup_count: int\n    ):\n        \"\"\"Adds default handlers to the logger.\"\"\"\n        # Stream Handler (Console output)\n        stream_handler = logging.StreamHandler()\n        stream_handler.setLevel(log_level)\n        stream_handler.setFormatter(self.formatter)\n        self.logger.addHandler(stream_handler)\n\n        # Rotating File Handler (File output with rotation)\n        if log_file:\n            file_handler = self.create_file_handler(log_file, log_level, max_bytes, backup_count)\n            if file_handler:\n                self.logger.addHandler(file_handler)\n\n    def log(self, level: int, message: str):\n        \"\"\"Logs a message at the specified log level.\"\"\"\n        log_method = getattr(self.logger, logging.getLevelName(level).lower(), None)\n        if callable(log_method):\n            log_method(message)\n        else:\n            self.logger.error(f\"Invalid log level: {level}\")\n\n    def get_logger(self) -&gt; logging.Logger:\n        \"\"\"Returns the configured logger instance.\"\"\"\n        return self.logger\n\n\n# Usage example\nif __name__ == \"__main__\":\n    custom_formatter = logging.Formatter(\"%(levelname)s: %(message)s\")\n    custom_handlers = [logging.StreamHandler()]\n\n    log_handler = CustomLoggingHandler(\n        log_file=\"event_analyzer.log\",\n        formatter=custom_formatter,\n        handlers=custom_handlers\n    )\n\n    # Log some events at different levels\n    log_handler.log(logging.INFO, \"This is an info message.\")\n    log_handler.log(logging.WARNING, \"This is a warning message.\")\n    log_handler.log(logging.ERROR, \"This is an error message.\")\n    log_handler.log(logging.DEBUG, \"This is a debug message.\")\n</code></pre>"},{"location":"resources/glossary/#box-plot","title":"Box Plot","text":"<pre><code># boxplot.py\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\n\ndef plot_boxplot(\n    dataframe: pd.DataFrame, \n    x_column: str, \n    y_column: str, \n    color: str = 'blue', \n    title: Optional[str] = None, \n    figsize: Tuple[int, int] = (8, 6)\n) -&gt; Optional[plt.Figure]:\n    \"\"\"\n    Plot boxplot.\n\n    Parameters:\n        dataframe (pd.DataFrame): Input DataFrame.\n        x_column (str): Name of the column for x-axis.\n        y_column (str): Name of the column for y-axis.\n        color (str, optional): Color of the boxplot.\n        title (str, optional): Title of the plot.\n        figsize (tuple, optional): Figure size.\n\n    Returns:\n        Optional[plt.Figure]: The matplotlib figure object if successful, None otherwise.\n    \"\"\"\n    fig, ax = plt.subplots(figsize=figsize)\n    try:\n        if dataframe.empty:\n            raise ValueError(\"DataFrame is empty.\")\n\n        if not all(col in dataframe.columns for col in [x_column, y_column]):\n            raise ValueError(f\"Columns '{x_column}' or '{y_column}' not found in DataFrame.\")\n\n        dataframe = dataframe.dropna(subset=[x_column, y_column])\n        sns.boxplot(data=dataframe, x=x_column, y=y_column, color=color, ax=ax)\n        ax.set(\n            title=f\"Boxplot of {y_column} grouped by {x_column}\" if title is None else title,\n            xlabel=x_column, \n            ylabel=y_column\n        )\n        return fig  # Return the figure object\n    except ValueError as ve:\n        logger.error(f\"Error plotting boxplot: {ve}\")\n        return None\n\ndef test_boxplot() -&gt; None:\n    \"\"\"Test the plot_boxplot function.\"\"\"\n    data = {'group': ['A', 'A', 'B', 'B', 'B'], 'value': [1, 2, 3, 4, 5]}\n    df = pd.DataFrame(data)\n    fig = plot_boxplot(df, 'group', 'value')\n    if fig:\n        plt.show()\n\nif __name__ == \"__main__\":\n    test_boxplot()\n</code></pre>"},{"location":"resources/glossary/#compare-dates","title":"Compare Dates","text":"<pre><code>def validate_date_columns(dataframe: pd.DataFrame, required_columns: Optional[list] = None) -&gt; None:\n    \"\"\"Ensure the required columns exist in the DataFrame.\"\"\"\n    required_columns = required_columns or [\"start_date\", \"end_date\"]\n    missing_columns = [col for col in required_columns if col not in dataframe.columns]\n\n    if missing_columns:\n        raise ValueError(f\"Missing required columns: {', '.join(missing_columns)}\")\n\ndef convert_to_datetime(dataframe: pd.DataFrame, columns: list[str]) -&gt; pd.DataFrame:\n    \"\"\"Convert specified columns to datetime.\"\"\"\n    for column in columns:\n        dataframe[column] = pd.to_datetime(dataframe[column], errors='raise')\n    return dataframe\n\ndef compare_dates(dataframe: pd.DataFrame) -&gt; pd.DataFrame:\n    \"\"\"\n    Compare start and end dates for each row in the DataFrame.\n\n    Parameters:\n        dataframe (pd.DataFrame): The DataFrame containing the data to be analyzed.\n\n    Returns:\n        pd.DataFrame: A new DataFrame containing the original data along with a new column\n                      indicating whether the end date is after the start date.\n    \"\"\"\n    try:\n        # Validate and convert columns\n        validate_date_columns(dataframe)\n        dataframe = convert_to_datetime(dataframe, [\"start_date\", \"end_date\"])\n\n        # Add comparison column\n        dataframe[\"end_after_start\"] = dataframe[\"end_date\"] &gt; dataframe[\"start_date\"]\n        return dataframe\n\n    except (ValueError, pd.errors.ParserError) as e:\n        logger.error(f\"Error in compare_dates: {e}\")\n        raise\n\ndef example_usage() -&gt; None:\n    \"\"\"Example usage of the compare_dates function.\"\"\"\n    data = {\n        \"id\": [1, 2, 3],\n        \"start_date\": [\"2024-01-01\", \"2024-02-01\", \"2024-03-01\"],\n        \"end_date\": [\"2024-01-15\", \"2024-02-10\", \"2024-03-20\"],\n    }\n    df = pd.DataFrame(data)\n\n    try:\n        result_df = compare_dates(df)\n        print(result_df)\n    except ValueError as e:\n        logger.error(f\"Example usage failed: {e}\")\n\nif __name__ == \"__main__\":\n    example_usage()\n</code></pre>"},{"location":"resources/glossary/#data-processor","title":"Data Processor","text":"<pre><code>import re\n\n\nclass DataProcessor:\n    def __init__(self):\n        self.email_pattern = re.compile(r'\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}\\b')\n        self.word_pattern = re.compile(r'\\b[a-zA-Z]{5,15}\\b')\n        self.url_pattern = re.compile(r'(https?:\\/\\/)?([\\da-z\\.-]+)\\.([a-z\\.]{2,6})([\\/\\w \\.-]*)*\\/?$')\n        self.phone_pattern = re.compile(r'(\\+\\d{1,2}\\s)?\\(?\\d{3}\\)?[\\s.-]?\\d{3}[\\s.-]?\\d{4}')\n\n    def find_emails(self, text: str) -&gt; List[str]:\n        \"\"\"Find all email addresses in the given text.\"\"\"\n        return self.email_pattern.findall(text.lower())\n\n    def find_words(self, text: str) -&gt; List[str]:\n        \"\"\"Find all words of length 5 to 15 in the given text.\"\"\"\n        return self.word_pattern.findall(text.lower())\n\n    def find_urls(self, text: str) -&gt; List[str]:\n        \"\"\"Find all URLs in the given text.\"\"\"\n        return self.url_pattern.findall(text.lower())\n\n    def find_phone_numbers(self, text: str) -&gt; List[str]:\n        \"\"\"Find all phone numbers in the given text.\"\"\"\n        return self.phone_pattern.findall(text)\n\n    def count_word_occurrences(self, text: str) -&gt; Dict[str, int]:\n        \"\"\"Count occurrences of each word in the given text.\"\"\"\n        words = self.word_pattern.findall(text.lower())\n        return {word: words.count(word) for word in set(words)}\n\n    def extract_domains(self, emails: List[str]) -&gt; List[str]:\n        \"\"\"Extract domain names from email addresses.\"\"\"\n        return [re.search(r'@(.+)$', email).group(1) for email in emails]\n\n    def validate_input(self, text: str):\n        \"\"\"Validate input text.\"\"\"\n        if not isinstance(text, str):\n            raise ValueError(\"Input must be a string.\")\n        if len(text.strip()) == 0:\n            raise ValueError(\"Input cannot be empty.\")\n\n# Example usage\nif __name__ == \"__main__\":\n    processor = DataProcessor()\n\n    sample_text = \"\"\"\n    Here are some sample emails: test@example.com, hello@world.com.\n    Some words: example, processor, text, data.\n    Some URLs: https://example.com, http://test.com.\n    Phone numbers: +1 (123) 456-7890, 0987654321\n    \"\"\"\n\n    try:\n        processor.validate_input(sample_text)\n\n        emails = processor.find_emails(sample_text)\n        words = processor.find_words(sample_text)\n        urls = processor.find_urls(sample_text)\n        phone_numbers = processor.find_phone_numbers(sample_text)\n        word_counts = processor.count_word_occurrences(sample_text)\n        domains = processor.extract_domains(emails)\n\n        print(\"Emails found:\", emails)\n        print(\"Words found:\", words)\n        print(\"URLs found:\", urls)\n        print(\"Phone numbers found:\", phone_numbers)\n        print(\"Word occurrences:\", word_counts)\n        print(\"Domains extracted:\", domains)\n\n    except ValueError as e:\n        print(f\"Error: {e}\")\n</code></pre>"},{"location":"support/community-support/","title":"Community Support","text":""},{"location":"support/community-support/#posting-questions","title":"Posting Questions:","text":"<p>Clearly state your question or issue. Provide relevant details and context. Be respectful and follow community guidelines.</p>"},{"location":"support/community-support/#responding-to-others","title":"Responding to Others:","text":"<p>Offer help if you have relevant knowledge. Be polite and constructive in your responses.</p>"},{"location":"support/community-support/#participating-in-discussions","title":"Participating in Discussions:","text":"<p>Join ongoing discussions on topics of interest. Share your experiences and insights.</p>"},{"location":"support/contact/","title":"Contact","text":"<p>Contact Support</p>"}]}